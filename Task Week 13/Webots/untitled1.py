# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XJZj2nTptRx4qDSs50ycszBGZ-huHh9G
"""

import argparse
import numpy as np
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense

def create_model():
    model = Sequential()
    model.add(Dense(64, input_dim=2, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(2))  # Output layer for x and y position
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model

def particles_filter(robot_position, particles_number, sigma_xy, sigma_theta):
    # Inisialisasi partikel
    particles = np.random.normal(loc=robot_position, scale=[sigma_xy, sigma_xy], size=(particles_number, 2))

    # Simulasi pergerakan partikel
    for i in range(particles_number):
        # Tambahkan noise ke setiap partikel
        noise = np.random.normal(loc=0, scale=[sigma_xy, sigma_theta])
        particles[i] += noise

    # Menghitung estimasi posisi berdasarkan partikel
    estimated_position = np.mean(particles, axis=0)
    return estimated_position

def main(init_x, init_y, particles_number, sigma_xy, sigma_theta):
    # Inisialisasi posisi robot
    robot_position = np.array([init_x, init_y])
    print(f"Robot initialized at position: {robot_position}")

    # Model Machine Learning
    model = create_model()

    # Simulasi estimasi posisi menggunakan Particles Filter
    estimated_position = particles_filter(robot_position, particles_number, sigma_xy, sigma_theta)
    print(f"Estimated position using Particle Filter: {estimated_position}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Robot Positioning Estimation')
    parser.add_argument('--initx', type=float, default=0.0, help='Initial X position of robot')
    parser.add_argument('--inity', type=float, default=0.0, help='Initial Y position of robot')
    parser.add_argument('--particles_number', type=int, default=100, help='Number of particles')
    parser.add_argument('--sigma_xy', type=float, default=0.1, help='Sigma XY for noise')
    parser.add_argument('--sigma_theta', type=float, default=10.0, help='Sigma Theta for noise')

    args = parser.parse_args()
    main(args.initx, args.inity, args.particles_number, args.sigma_xy, args.sigma_theta)